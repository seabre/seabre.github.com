<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean Brewer]]></title>
  <link href="http://seabre.github.io/atom.xml" rel="self"/>
  <link href="http://seabre.github.io/"/>
  <updated>2015-10-22T18:58:22-04:00</updated>
  <id>http://seabre.github.io/</id>
  <author>
    <name><![CDATA[Sean Brewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local Two-Factor Authentication With U2F on Ubuntu 14.04]]></title>
    <link href="http://seabre.github.io/blog/2015/10/17/local-two-factor-authentication-with-u2f-on-ubuntu-14-dot-04/"/>
    <updated>2015-10-17T21:21:26-04:00</updated>
    <id>http://seabre.github.io/blog/2015/10/17/local-two-factor-authentication-with-u2f-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>I received my GitHub-themed U2F Yubikey this week. <a href="https://en.wikipedia.org/wiki/Universal_2nd_Factor">U2F</a> is an open, standardized protocol for allowing people to authenticate with a device. It hasn&rsquo;t been around long, but there are already <a href="https://www.yubico.com/why-yubico/for-individuals/github/">strong efforts</a> to get people to use it.</p>

<p>If you&rsquo;ve used the Google Authenticator app,  you&rsquo;ll see the utility of a U2F key as it&rsquo;s much smaller than a smartphone. Getting it to work is as simple as inserting the key and pressing a button.
A majority of implementations, and there aren&rsquo;t many, are web services like Google and GitHub. <a href="https://www.yubico.com/">Yubico</a> has produced a <a href="https://developers.yubico.com/pam-u2f/">pam-u2f</a> module that allows you to hook in U2F authentication to PAM. PAM is what Linux uses to allow adding and customizing various authentication mechanisms.</p>

<h2>Very Important Note</h2>

<p>If you are worried about potentially locking yourself out of your machine, <strong>do not continue</strong>.</p>

<p><strong>There is the very real risk of locking yourself out of your machine following this guide. I have not tested scenarios with a fully-encrypted disk or with an encrypted home directory. Proceed with caution.</strong></p>

<h2>Getting Started</h2>

<p>Adding U2F to Ubuntu 14.04 is actually straightforward. The documentation for the PAM module is dense, so that&rsquo;s where this article comes in. These instructions could work with Debian, but I haven&rsquo;t tried.</p>

<p>First, you need to add Yubico&rsquo;s package repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:yubico/stable
</span><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>Then, you need to install the relevant packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install pam-u2f pamu2fcfg</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install some rules for Linux&rsquo;s device manager so it can deal with the U2F keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo wget -O /etc/udev/rules.d/70-u2f.rules https://raw.githubusercontent.com/Yubico/libu2f-host/master/70-u2f.rules</span></code></pre></td></tr></table></div></figure>


<p>After this, you should reboot your machine.</p>

<h2>Registering Your Key</h2>

<p>When your machine starts up again, we need to setup the locations that will hold our keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/.yubico ~/.config/Yubico
</span><span class='line'>touch ~/.config/Yubico/u2f_keys
</span><span class='line'>ln -s ~/.config/Yubico/u2f_keys ~/.yubico/u2f_keys</span></code></pre></td></tr></table></div></figure>


<p>The latest versions of pam-u2f read from <code>~/.config/Yubico/u2f_keys</code> while the current version in the Ubuntu repository reads from <code>~/.yubico/u2f_keys</code>. With this method, the actual key is stored in <code>~/.config/Yubico</code>. The symbolic link in <code>~/.yubico/u2f_keys</code> points to <code>~/.config/Yubico/u2f_keys</code>. I set it up this way because I do not know what will happen when Yubico updates what is in the Ubuntu repository!</p>

<p>Next, we need to tell the system about the key we want to register. We will use the <code>pamu2fcfg</code> tool to do that.</p>

<p>Insert your U2F key and run <code>pamu2fcfg -umyusername</code> where <code>myusername</code> is your account&rsquo;s username. It should recognize your key. When it does, press the button on your key. It will generate a code that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>myusername:oijoij3o4ijfoi3j4ifj3o4jfiojewlkjflksjefw4g4g34gr34g34-g34g3-4g34g34g34g3,9043809584309850943284023023024230009809809898a09898098b</span></code></pre></td></tr></table></div></figure>


<p>Now, fire up a text editor and copy the text <code>pamu2fcfg</code> generated and place it in <code>~/.config/Yubico/u2f_keys</code>. Very important note: If you use zsh, you may see a percent sign at the end. Do not include that!</p>

<h2>Configuring PAM</h2>

<p>Now it&rsquo;s time to setup PAM to use your U2F key. What we want to do is require the U2F key for authentication every single time you enter your password.</p>

<p>Located in <code>/etc/pam.d/common-auth</code> are the particular rules for handling this. Mine before I added the U2F rules looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># /etc/pam.d/common-auth - authentication settings common to all services
</span><span class='line'>#
</span><span class='line'># This file is included from other service-specific PAM config files,
</span><span class='line'># and should contain a list of the authentication modules that define
</span><span class='line'># the central authentication scheme for use on the system
</span><span class='line'># (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the
</span><span class='line'># traditional Unix authentication mechanisms.
</span><span class='line'>#
</span><span class='line'># As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
</span><span class='line'># To take advantage of this, it is recommended that you configure any
</span><span class='line'># local modules either before or after the default block, and use
</span><span class='line'># pam-auth-update to manage selection of other modules.  See
</span><span class='line'># pam-auth-update(8) for details.
</span><span class='line'>
</span><span class='line'># here are the per-package modules (the "Primary" block)
</span><span class='line'>auth  [success=1 default=ignore]  pam_unix.so nullok_secure
</span><span class='line'># here's the fallback if no module succeeds
</span><span class='line'>auth  requisite     pam_deny.so
</span><span class='line'># prime the stack with a positive return value if there isn't one already;
</span><span class='line'># this avoids us returning an error just because nothing sets a success code
</span><span class='line'># since the modules above will each just jump around
</span><span class='line'>auth  required      pam_permit.so
</span><span class='line'># and here are more per-package modules (the "Additional" block)
</span><span class='line'>auth  optional      pam_cap.so
</span><span class='line'># end of pam-auth-update config</span></code></pre></td></tr></table></div></figure>


<p>To get U2F working, we need to open <code>/etc/pam.d/common-auth</code> in a text editor. Add this line at the end of the file: <code>auth sufficient pam_u2f.so debug cue</code></p>

<p>With that addition, it should look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># /etc/pam.d/common-auth - authentication settings common to all services
</span><span class='line'>#
</span><span class='line'># This file is included from other service-specific PAM config files,
</span><span class='line'># and should contain a list of the authentication modules that define
</span><span class='line'># the central authentication scheme for use on the system
</span><span class='line'># (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the
</span><span class='line'># traditional Unix authentication mechanisms.
</span><span class='line'>#
</span><span class='line'># As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
</span><span class='line'># To take advantage of this, it is recommended that you configure any
</span><span class='line'># local modules either before or after the default block, and use
</span><span class='line'># pam-auth-update to manage selection of other modules.  See
</span><span class='line'># pam-auth-update(8) for details.
</span><span class='line'>
</span><span class='line'># here are the per-package modules (the "Primary" block)
</span><span class='line'>auth  [success=1 default=ignore]  pam_unix.so nullok_secure
</span><span class='line'># here's the fallback if no module succeeds
</span><span class='line'>auth  requisite     pam_deny.so
</span><span class='line'># prime the stack with a positive return value if there isn't one already;
</span><span class='line'># this avoids us returning an error just because nothing sets a success code
</span><span class='line'># since the modules above will each just jump around
</span><span class='line'>auth  required      pam_permit.so
</span><span class='line'># and here are more per-package modules (the "Additional" block)
</span><span class='line'>auth  optional      pam_cap.so
</span><span class='line'># end of pam-auth-update config
</span><span class='line'>
</span><span class='line'># u2f
</span><span class='line'>auth sufficient pam_u2f.so debug cue</span></code></pre></td></tr></table></div></figure>


<p>After you do this reboot. After your computer boots back up again, login. It won&rsquo;t force you to have your U2F key at this point. We need to test and make sure there are no issues first. The <code>sufficient</code> option in our U2F PAM config above allows us to not require the key.</p>

<p>Open up a terminal, insert your U2F key and type <code>sudo ls</code>. It will ask you for your password. After you enter your password you should see a bunch of text. At the end you should see something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[../util.c:get_devices_from_authfile(140)] Length of key number 1 is 65
</span><span class='line'>[../util.c:get_devices_from_authfile(166)] Found 1 device(s) for user seabre
</span><span class='line'>[../util.c:do_authentication(219)] Device max index is 0
</span><span class='line'>[../util.c:do_authentication(242)] Attempting authentication with device number 1</span></code></pre></td></tr></table></div></figure>


<p>If you do, you&rsquo;ll see your key blinking. Press the button on your U2F key. It should authenticate you and run the <code>ls</code> command.</p>

<p><strong>WARNING</strong>: <strong>Do not continue</strong> if your key did not blink after you entered your password. <strong>You probably won&rsquo;t be able to log in to your machine if you follow the instructions after this point.</strong></p>

<p>If you did see your key blink after you entered your password and were able to touch your key to access your machine, feel free to continue beyond this point. However, proceed with caution. You can now change the U2F options in your PAM config to <code>auth required pam_u2f.so cue</code></p>

<p>So now your <code>/etc/pam.d/common-auth</code> should look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># /etc/pam.d/common-auth - authentication settings common to all services
</span><span class='line'>#
</span><span class='line'># This file is included from other service-specific PAM config files,
</span><span class='line'># and should contain a list of the authentication modules that define
</span><span class='line'># the central authentication scheme for use on the system
</span><span class='line'># (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the
</span><span class='line'># traditional Unix authentication mechanisms.
</span><span class='line'>#
</span><span class='line'># As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
</span><span class='line'># To take advantage of this, it is recommended that you configure any
</span><span class='line'># local modules either before or after the default block, and use
</span><span class='line'># pam-auth-update to manage selection of other modules.  See
</span><span class='line'># pam-auth-update(8) for details.
</span><span class='line'>
</span><span class='line'># here are the per-package modules (the "Primary" block)
</span><span class='line'>auth  [success=1 default=ignore]  pam_unix.so nullok_secure
</span><span class='line'># here's the fallback if no module succeeds
</span><span class='line'>auth  requisite     pam_deny.so
</span><span class='line'># prime the stack with a positive return value if there isn't one already;
</span><span class='line'># this avoids us returning an error just because nothing sets a success code
</span><span class='line'># since the modules above will each just jump around
</span><span class='line'>auth  required      pam_permit.so
</span><span class='line'># and here are more per-package modules (the "Additional" block)
</span><span class='line'>auth  optional      pam_cap.so
</span><span class='line'># end of pam-auth-update config
</span><span class='line'>
</span><span class='line'># u2f
</span><span class='line'>auth required pam_u2f.so cue</span></code></pre></td></tr></table></div></figure>


<p>After this change, you will need to reboot. After you reboot, try logging in without your key. You will notice that it will tell you your password is wrong. Try again, but first insert your U2F key. Enter your password as usual and press enter. You should see your U2F key blinking. Press the button on your U2F key. You should now be logged in.</p>

<h2>Recommendations</h2>

<h3>Get A Second U2F Key</h3>

<p>If you intend to require U2F for login, what happens if you lose your key? You won&rsquo;t be able to get in. Get a second key, register it, then put it in a safe place. Yubico <a href="https://developers.yubico.com/pam-u2f/">describes</a> the format of <code>u2f_keys</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;username&gt;:&lt;KeyHandle1&gt;,&lt;UserKey1&gt;:&lt;KeyHandle2&gt;,&lt;UserKey2&gt;:...</span></code></pre></td></tr></table></div></figure>


<p>So you can run <code>pamu2fcfg</code> with your second key and follow the format to add it to <code>u2f_keys</code> described above.</p>

<h3>Consider Full Disk Encryption</h3>

<p>As far as I know, you won&rsquo;t be able to do this if you&rsquo;ve installed Ubuntu without it already. But, doing this makes it less possible to bypass two-factor authentication.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Travis CI for OpenCV and Midje]]></title>
    <link href="http://seabre.github.io/blog/2014/03/09/setting-up-travis-ci-for-opencv-and-midje/"/>
    <updated>2014-03-09T20:56:00-04:00</updated>
    <id>http://seabre.github.io/blog/2014/03/09/setting-up-travis-ci-for-opencv-and-midje</id>
    <content type="html"><![CDATA[<p>I’ve been fiddling with <a href="http://opencv.org">OpenCV</a> for a few weeks. Using OpenCV and Clojure is straightforward. The hardest part was setting up OpenCV.</p>

<p>When I’m experimenting and I get to a place where I feel like I know what I’m doing, I’ll start writing tests. Eventually you&rsquo;ll setup continuous integration, but then you remember how difficult installing OpenCV was! If you’d like to use Travis CI with your Clojure project using OpenCV, I’ve already done the work for you! Swapping out midje isn’t a problem, if you’d rather use core.test or speclj, but I’m going to focus on midje here.</p>

<p>I’m assuming your project looks something like Magomimmo’s <a href="https://github.com/magomimmo/opencv-start">opencv-start</a>. He’s also the guy that wrote the <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/clojure_dev_intro/clojure_dev_intro.html">Clojure tutorial</a> on OpenCV’s documentation site. If you setup your project using those instructions, that is fine since they are almost identical. The only difference is that I’m using a more more up to date version of OpenCV. You will have to make a few changes to the Travis CI yaml configuration below if you want to use a different version.</p>

<p>First, we need to add the midje and lein localrepo plugins to our project.clj if they aren’t there already. Travis CI needs to know about them. Adding the following line inside defproject within your project.clj should suffice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-localrepo</span> <span class="s">&quot;0.5.3&quot;</span><span class="p">]</span> <span class="p">[</span><span class="nv">lein-midje</span> <span class="s">&quot;3.1.3&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to add the <code>.travis.yml</code> config to the root of the repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">clojure</span>
</span><span class='line'><span class="l-Scalar-Plain">lein</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">lein2</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">lein2 midje</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">compiler</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gcc</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo apt-get update</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo apt-get install python-dev python-numpy</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git clone https://github.com/Itseez/opencv.git</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd opencv</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git checkout 2.4</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir build</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd build</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmake ..</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">make -j8</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo make -j8 install</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd ../..</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p native/linux/x86_64</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cp opencv/build/lib/libopencv_java248.so native/linux/x86_64/libopencv_java248.so</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cp opencv/build/bin/opencv-248.jar .</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jar -cMf opencv-native-248.jar native</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">lein2 localrepo install opencv-248.jar opencv/opencv 2.4.8</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">lein2 localrepo install opencv-native-248.jar opencv/opencv-native 2.4.8</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this configuration, we tell Travis CI that: our project is a Clojure project, that we are using Leiningen 2.0, midje for testing, and Oracle JDK 7. The lines after that are for building OpenCV.</p>

<p>The lines before <code>before_script</code> tell Travis CI that: we need to use the GCC compiler, install python dev dependencies, and numpy for OpenCV. The lines in <code>before_script</code> are the actual build process automation for OpenCV.</p>

<p>If you noticed that the <code>before_script</code> is similar to the build steps in Magomimmo’s tutorial, you would be right. The only change I made was to use OpenCV 2.4.8. If you’d like to use a different release, you should change the <code>before_script</code> to match your needs. On Travis CI, the build process takes about 8 minutes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Livecoding Environment for Overtone With Light Table]]></title>
    <link href="http://seabre.github.io/blog/2013/08/31/a-simple-livecoding-environment-for-overtone-with-light-table/"/>
    <updated>2013-08-31T13:08:00-04:00</updated>
    <id>http://seabre.github.io/blog/2013/08/31/a-simple-livecoding-environment-for-overtone-with-light-table</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://overtone.github.io/">Overtone</a> off and on for a while, and I&rsquo;ve been wanting to try out <a href="http://www.lighttable.com/">Light Table</a>, so I decided to see if I could get Overtone working with it.</p>

<p>Emacs is pretty much the standard for livecoding in Overtone, but it&rsquo;s not the most accessible environment for beginners. I actually use vim, but it&rsquo;s not that great, either. Light Table seems to be a good alternative, but I ran into some project dependency problems getting it setup. The fixes are easy to duplicate. After the problem is solved, it&rsquo;s nice.</p>

<p>I&rsquo;m going to assume the following: you&rsquo;re in a Linux environment, you already have a copy of Light Table installed and working, you have <a href="http://leiningen.org/">Leiningen</a> installed and working, and that you already have <a href="http://supercollider.sourceforge.net/">SuperCollider</a> installed and working, which we need for Overtone.</p>

<p>First, let&rsquo;s generate a new project somewhere:</p>

<p><code>$ lein new livecoding</code></p>

<p>Now, add the <code>livecoding</code> project to your workspace in Light Table. If you need help doing this, check the <a href="http://docs.lighttable.com/">docs</a>.</p>

<p>Inside your <code>livecoding</code> project, you should have <code>project.clj</code>, which looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">livecoding</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;FIXME: write description&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;http://example.com/FIXME&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, great. But now we need to add Overtone. Usually, we&rsquo;d just change <code>project.clj</code> to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">livecoding</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;FIXME: write description&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;http://example.com/FIXME&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">overtone</span> <span class="s">&quot;0.8.1&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that Overtone has a dependency on Clojure 1.3.0, which Light Table&rsquo;s REPL refuses to use. We need to force Overtone to use Clojure 1.5.1. Let&rsquo;s fix that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">livecoding</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;FIXME: write description&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;http://example.com/FIXME&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">overtone</span> <span class="s">&quot;0.8.1&quot;</span> <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">org.clojure/clojure</span><span class="p">]]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/data.json</span> <span class="s">&quot;0.2.2&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK. So what does that do? We&rsquo;re forcing overtone to ignore its dependency on Clojure 1.3. We&rsquo;re also adding <code>data.json</code>, because Light Table&rsquo;s REPL appears to have a dependency on that. Now, we&rsquo;re good to go.</p>

<p>Make sure you saved the changes to <code>project.clj</code> and let&rsquo;s now open up <code>core.clj</code>, which should be in <code>src/livecoding</code> in our workspace.</p>

<p>Let&rsquo;s change it to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">livecoding.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="nv">overtone.live</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s get the REPL going. Just press <code>Ctrl+Enter</code> to boot up Overtone. It takes a little bit to get started, but once it boots up, let&rsquo;s just confirm it works. Change <code>core.clj</code> to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">livecoding.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="nv">overtone.live</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">demo</span> <span class="p">(</span><span class="nf">sin-osc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Highlight <code>(demo (sin-osc))</code> and press <code>Ctrl+Enter</code> and you should hear a simple Sine wave.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blum Blum Shub Pseudo Random Number Generator Coffeescript Implementation]]></title>
    <link href="http://seabre.github.io/blog/2012/04/14/blum-blum-shub-pseudo-random-number-generator-coffeescript-implementation/"/>
    <updated>2012-04-14T23:40:00-04:00</updated>
    <id>http://seabre.github.io/blog/2012/04/14/blum-blum-shub-pseudo-random-number-generator-coffeescript-implementation</id>
    <content type="html"><![CDATA[<p>This weekend hasn&rsquo;t been as busy as they have been lately, so I&rsquo;ve had a lot more time to just sit around. I was reading some articles on PRNGs, and a PRNG I&rsquo;ve never heard of caught my eye. Mainly, I think, because of its name. <a href="http://en.wikipedia.org/wiki/Blum_Blum_Shub">Blum Blum Shub</a> is a PRNG devised by some mathematicians and computer scientists in the mid 1980&rsquo;s. I decided to do a Coffeescript implementation of it.</p>

<div><script src='https://gist.github.com/2389826.js'></script>
<noscript><pre><code># An implementation of assert.
AssertException = (message) -&gt;
  @message = message
assert = (exp, message) -&gt;
  throw new AssertException(message)  unless exp
AssertException::toString = -&gt;
  &quot;AssertException: &quot; + @message



# Implementation of Blum Blum Shub 
# p - Large Prime 1. Should be congruent to 3 mod 4.
# q - Large Prime 2. Should be to congruent to 3 mod 4.
# s - The seed. Should be a co-prime of the product of p and q.

blum_blum_shub = (p,q,s,i) -&gt;
  # Primes p and q must be congruent to 3 mod 4
  assert((p % 4) == 3, &quot;Error: Prime P is not congruent to 3 mod 4&quot;)
  assert((q % 4) == 3, &quot;Error: Prime Q is not congruent to 3 mod 4&quot;)

  m = p * q
  
  x = s

  for step in [0..i]
    x = (x * x) % m
  
  x</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common MySQL Tasks]]></title>
    <link href="http://seabre.github.io/blog/2012/04/13/common-mysql-tasks/"/>
    <updated>2012-04-13T00:34:00-04:00</updated>
    <id>http://seabre.github.io/blog/2012/04/13/common-mysql-tasks</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pretty terrible at remembering some of the simpler MySQL tasks, so here are a few of the more common tasks I do on a regular basis that I keep written down so I don&rsquo;t forget them.</p>

<h2>Dump The MySQL Database</h2>

<p><code>mysqldump -u username -p -r my_output.sql my_database</code></p>

<h3>Compress Output with 7zip using the PPMd Algorithm (Optional)</h3>

<p><code>7z a -t7z my_output.7z my_output.sql -m0=PPMd</code></p>

<h3>Decompress Output with 7zip (Optional)</h3>

<p><code>7z e my_output.7z</code></p>

<h2>Restore The MySQL Database</h2>

<p><code>mysql -u username -p my_database &lt; my_output.sql</code></p>

<h2>Export Table as CSV From MySQL</h2>

<p><code>SELECT * INTO OUTFILE '/tmp/my_table_name.csv' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '\\' LINES TERMINATED BY '\n' FROM my_table_name;</code></p>
]]></content>
  </entry>
  
</feed>
