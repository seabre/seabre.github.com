<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Sean Brewer]]></title>
  <link href="http://seabre.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://seabre.github.io/"/>
  <updated>2014-03-09T22:18:07-04:00</updated>
  <id>http://seabre.github.io/</id>
  <author>
    <name><![CDATA[Sean Brewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Travis CI for OpenCV and Midje]]></title>
    <link href="http://seabre.github.io/blog/2014/03/09/setting-up-travis-ci-for-opencv-and-midje/"/>
    <updated>2014-03-09T20:56:00-04:00</updated>
    <id>http://seabre.github.io/blog/2014/03/09/setting-up-travis-ci-for-opencv-and-midje</id>
    <content type="html"><![CDATA[<p>I’ve been fiddling with <a href="http://opencv.org">OpenCV</a> for a few weeks. Using OpenCV and Clojure is straightforward. The hardest part was setting up OpenCV.</p>

<p>When I’m experimenting and I get to a place where I feel like I know what I’m doing, I’ll start writing tests. Eventually you&rsquo;ll setup continuous integration, but then you remember how difficult installing OpenCV was! If you’d like to use Travis CI with your Clojure project using OpenCV, I’ve already done the work for you! Swapping out midje isn’t a problem, if you’d rather use core.test or speclj, but I’m going to focus on midje here.</p>

<p>I’m assuming your project looks something like Magomimmo’s <a href="https://github.com/magomimmo/opencv-start">opencv-start</a>. He’s also the guy that wrote the <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/clojure_dev_intro/clojure_dev_intro.html">Clojure tutorial</a> on OpenCV’s documentation site. If you setup your project using those instructions, that is fine since they are almost identical. The only difference is that I’m using a more more up to date version of OpenCV. You will have to make a few changes to the Travis CI yaml configuration below if you want to use a different version.</p>

<p>First, we need to add the midje and lein localrepo plugins to our project.clj if they aren’t there already. Travis CI needs to know about them. Adding the following line inside defproject within your project.clj should suffice:</p>

<p><code>clojure
:plugins [[lein-localrepo "0.5.3"] [lein-midje "3.1.3"]]
</code></p>

<p>Next, we need to add the <code>.travis.yml</code> config to the root of the repo:</p>

<p>```yaml
language: clojure
lein: lein2
script: lein2 midje
jdk:
  &ndash; oraclejdk7</p>

<p>compiler:
  &ndash; gcc</p>

<p>before_install:
  &ndash; sudo apt-get update</p>

<p>install:
  &ndash; sudo apt-get install python-dev python-numpy</p>

<p>before_script:
  &ndash; git clone <a href="https://github.com/Itseez/opencv.git">https://github.com/Itseez/opencv.git</a>
  &ndash; cd opencv
  &ndash; git checkout 2.4
  &ndash; mkdir build
  &ndash; cd build
  &ndash; cmake ..
  &ndash; make -j8
  &ndash; sudo make -j8 install
  &ndash; cd ../..
  &ndash; mkdir -p native/linux/x86_64
  &ndash; cp opencv/build/lib/libopencv_java248.so native/linux/x86_64/libopencv_java248.so
  &ndash; cp opencv/build/bin/opencv-248.jar .
  &ndash; jar -cMf opencv-native-248.jar native
  &ndash; lein2 localrepo install opencv-248.jar opencv/opencv 2.4.8
  &ndash; lein2 localrepo install opencv-native-248.jar opencv/opencv-native 2.4.8
```
With this configuration, we tell Travis CI that: our project is a Clojure project, that we are using Leiningen 2.0, midje for testing, and Oracle JDK 7. The lines after that are for building OpenCV.</p>

<p>The lines before <code>before_script</code> tell Travis CI that: we need to use the GCC compiler, install python dev dependencies, and numpy for OpenCV. The lines in <code>before_script</code> are the actual build process automation for OpenCV.</p>

<p>If you noticed that the <code>before_script</code> is similar to the build steps in Magomimmo’s tutorial, you would be right. The only change I made was to use OpenCV 2.4.8. If you’d like to use a different release, you should change the <code>before_script</code> to match your needs. On Travis CI, the build process takes about 8 minutes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Livecoding Environment For Overtone With Light Table]]></title>
    <link href="http://seabre.github.io/blog/2013/08/31/a-simple-livecoding-environment-for-overtone-with-light-table/"/>
    <updated>2013-08-31T13:08:00-04:00</updated>
    <id>http://seabre.github.io/blog/2013/08/31/a-simple-livecoding-environment-for-overtone-with-light-table</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://overtone.github.io/">Overtone</a> off and on for a while, and I&rsquo;ve been wanting to try out <a href="http://www.lighttable.com/">Light Table</a>, so I decided to see if I could get Overtone working with it.</p>

<p>Emacs is pretty much the standard for livecoding in Overtone, but it&rsquo;s not the most accessible environment for beginners. I actually use vim, but it&rsquo;s not that great, either. Light Table seems to be a good alternative, but I ran into some project dependency problems getting it setup. The fixes are easy to duplicate. After the problem is solved, it&rsquo;s nice.</p>

<p>I&rsquo;m going to assume the following: you&rsquo;re in a Linux environment, you already have a copy of Light Table installed and working, you have <a href="http://leiningen.org/">Leiningen</a> installed and working, and that you already have <a href="http://supercollider.sourceforge.net/">SuperCollider</a> installed and working, which we need for Overtone.</p>

<p>First, let&rsquo;s generate a new project somewhere:</p>

<p><code>$ lein new livecoding</code></p>

<p>Now, add the <code>livecoding</code> project to your workspace in Light Table. If you need help doing this, check the <a href="http://docs.lighttable.com/">docs</a>.</p>

<p>Inside your <code>livecoding</code> project, you should have <code>project.clj</code>, which looks like this:</p>

<p>```clojure
(defproject livecoding &ldquo;0.1.0-SNAPSHOT&rdquo;
  :description &ldquo;FIXME: write description&rdquo;
  :url &ldquo;<a href="http://example.com/FIXME">http://example.com/FIXME</a>&rdquo;
  :license {:name &ldquo;Eclipse Public License&rdquo;</p>

<pre><code>        :url "http://www.eclipse.org/legal/epl-v10.html"}
</code></pre>

<p>  :dependencies [[org.clojure/clojure &ldquo;1.5.1&rdquo;]])
```</p>

<p>OK, great. But now we need to add Overtone. Usually, we&rsquo;d just change <code>project.clj</code> to look like this:</p>

<p>```clojure
(defproject livecoding &ldquo;0.1.0-SNAPSHOT&rdquo;
  :description &ldquo;FIXME: write description&rdquo;
  :url &ldquo;<a href="http://example.com/FIXME">http://example.com/FIXME</a>&rdquo;
  :license {:name &ldquo;Eclipse Public License&rdquo;</p>

<pre><code>        :url "http://www.eclipse.org/legal/epl-v10.html"}
</code></pre>

<p>  :dependencies [[org.clojure/clojure &ldquo;1.5.1&rdquo;]</p>

<pre><code>             [overtone "0.8.1"]])
</code></pre>

<p>```</p>

<p>The problem with this is that Overtone has a dependency on Clojure 1.3.0, which Light Table&rsquo;s REPL refuses to use. We need to force Overtone to use Clojure 1.5.1. Let&rsquo;s fix that:</p>

<p>```clojure
(defproject livecoding &ldquo;0.1.0-SNAPSHOT&rdquo;
  :description &ldquo;FIXME: write description&rdquo;
  :url &ldquo;<a href="http://example.com/FIXME">http://example.com/FIXME</a>&rdquo;
  :license {:name &ldquo;Eclipse Public License&rdquo;</p>

<pre><code>        :url "http://www.eclipse.org/legal/epl-v10.html"}
</code></pre>

<p>  :dependencies [[org.clojure/clojure &ldquo;1.5.1&rdquo;]</p>

<pre><code>             [overtone "0.8.1" :exclusions [org.clojure/clojure]]
             [org.clojure/data.json "0.2.2"]])
</code></pre>

<p>```</p>

<p>OK. So what does that do? We&rsquo;re forcing overtone to ignore its dependency on Clojure 1.3. We&rsquo;re also adding <code>data.json</code>, because Light Table&rsquo;s REPL appears to have a dependency on that. Now, we&rsquo;re good to go.</p>

<p>Make sure you saved the changes to <code>project.clj</code> and let&rsquo;s now open up <code>core.clj</code>, which should be in <code>src/livecoding</code> in our workspace.</p>

<p>Let&rsquo;s change it to this:</p>

<p><code>clojure
(ns livecoding.core
  (:use overtone.live))
</code></p>

<p>Now let&rsquo;s get the REPL going. Just press <code>Ctrl+Enter</code> to boot up Overtone. It takes a little bit to get started, but once it boots up, let&rsquo;s just confirm it works. Change <code>core.clj</code> to:</p>

<p>```clojure
(ns livecoding.core
  (:use overtone.live))</p>

<p>  (demo (sin-osc))
```</p>

<p>Highlight <code>(demo (sin-osc))</code> and press <code>Ctrl+Enter</code> and you should hear a simple Sine wave.</p>
]]></content>
  </entry>
  
</feed>
