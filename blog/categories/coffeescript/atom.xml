<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coffeescript | Sean Brewer]]></title>
  <link href="https://www.seabre.com/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="https://www.seabre.com/"/>
  <updated>2019-10-25T22:39:34-04:00</updated>
  <id>https://www.seabre.com/</id>
  <author>
    <name><![CDATA[Sean Brewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blum Blum Shub Pseudo Random Number Generator Coffeescript Implementation]]></title>
    <link href="https://www.seabre.com/blog/2012/04/14/blum-blum-shub-pseudo-random-number-generator-coffeescript-implementation/"/>
    <updated>2012-04-14T23:40:00-04:00</updated>
    <id>https://www.seabre.com/blog/2012/04/14/blum-blum-shub-pseudo-random-number-generator-coffeescript-implementation</id>
    <content type="html"><![CDATA[<p>This weekend hasn&rsquo;t been as busy as they have been lately, so I&rsquo;ve had a lot more time to just sit around. I was reading some articles on PRNGs, and a PRNG I&rsquo;ve never heard of caught my eye. Mainly, I think, because of its name. <a href="http://en.wikipedia.org/wiki/Blum_Blum_Shub">Blum Blum Shub</a> is a PRNG devised by some mathematicians and computer scientists in the mid 1980&rsquo;s. I decided to do a Coffeescript implementation of it.</p>

<p><div><script src='https://gist.github.com/2389826.js'></script>
<noscript><pre><code># An implementation of assert.
AssertException = (message) -&gt;
  @message = message
assert = (exp, message) -&gt;
  throw new AssertException(message)  unless exp
AssertException::toString = -&gt;
  &quot;AssertException: &quot; + @message



# Implementation of Blum Blum Shub 
# p - Large Prime 1. Should be congruent to 3 mod 4.
# q - Large Prime 2. Should be to congruent to 3 mod 4.
# s - The seed. Should be a co-prime of the product of p and q.

blum_blum_shub = (p,q,s,i) -&gt;
  # Primes p and q must be congruent to 3 mod 4
  assert((p % 4) == 3, &quot;Error: Prime P is not congruent to 3 mod 4&quot;)
  assert((q % 4) == 3, &quot;Error: Prime Q is not congruent to 3 mod 4&quot;)

  m = p * q
  
  x = s

  for step in [0..i]
    x = (x * x) % m
  
  x</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
